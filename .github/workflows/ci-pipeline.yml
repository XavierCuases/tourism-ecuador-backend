name: CI Pipeline

on:
  push:
    branches:
      - "QA"  # Se ejecuta cuando haces un push a la rama QA
    paths:
      - "Tourism_Activities_Management/**"  # Asegúrate de que el código relevante cambie
  pull_request:
    branches:
      - "main"  # Se ejecuta cuando hay un pull request hacia la rama main
    paths:
      - "Tourism_Activities_Management/**"  # Asegúrate de que el código relevante cambie

jobs:
  build:
    runs-on: ubuntu-latest  # Usamos un runner de Ubuntu

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Iniciar sesión en Docker Hub
      - name: Login Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      # Paso 3: Construir las imágenes Docker para cada microservicio
      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/create-activity:latest -f Tourism_Activities_Management/create-activity/Dockerfile .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/list-activities:latest -f Tourism_Activities_Management/list-activities/Dockerfile .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/update-activity:latest -f Tourism_Activities_Management/update-activity/Dockerfile .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/delete-activity:latest -f Tourism_Activities_Management/delete-activity/Dockerfile .

      # Paso 4: Subir las imágenes a Docker Hub
      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/create-activity:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/list-activities:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/update-activity:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/delete-activity:latest
