name: CI/CD Route Management

on:
  push:
    branches:
      - QA
    paths:
      - 'Route-Management/**'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment variables from GitHub secrets
        run: |
          echo "DB_HOST_US=${{ secrets.DB_HOST_US }}" >> $GITHUB_ENV
          echo "DB_PORT_US=${{ secrets.DB_PORT_US }}" >> $GITHUB_ENV
          echo "DB_USER_US=${{ secrets.DB_USER_US }}" >> $GITHUB_ENV
          echo "DB_PASSWORD_US=${{ secrets.DB_PASSWORD_US }}" >> $GITHUB_ENV
          echo "DB_NAME_RO=${{ secrets.DB_NAME_RO }}" >> $GITHUB_ENV

      - name: Instalar Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir las imágenes Docker con detalles
        working-directory: Route-Management
        run: |
            # Construir las imágenes con detalles de progreso
            docker-compose build --no-cache --progress=plain
        
            # Ver los logs resumidos
            docker-compose logs --tail=50 --no-color

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Crear archivo de clave privada
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > clave4.pem
          chmod 600 clave4.pem

      - name: Verificar conexión SSH antes de ejecutar comandos
        run: |
          echo "Probando conexión a ${{ secrets.AWS_HOST_RO }}"
          ping -c 3 ${{ secrets.AWS_HOST_RO }} || echo "No responde al ping"
          ssh -o StrictHostKeyChecking=no -i clave4.pem ubuntu@${{ secrets.AWS_HOST_RO }} "echo 'Conexión SSH exitosa'"
        continue-on-error: true

      - name: Exportar variables de entorno para Docker Compose
        run: |
          echo "DB_HOST_US=${{ secrets.DB_HOST_US }}" >> $GITHUB_ENV
          echo "DB_PORT_US=${{ secrets.DB_PORT_US }}" >> $GITHUB_ENV
          echo "DB_USER_US=${{ secrets.DB_USER_US }}" >> $GITHUB_ENV
          echo "DB_PASSWORD_US=${{ secrets.DB_PASSWORD_US }}" >> $GITHUB_ENV
          echo "DB_NAME_US=${{ secrets.DB_NAME_RO }}" >> $GITHUB_ENV
          

      - name: SSH into EC2 and run docker-compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AWS_HOST_RO }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu
            sudo docker-compose pull
            sudo docker-compose down || true
            sudo docker-compose up -d
